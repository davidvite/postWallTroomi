---
globs: client/**/*.tsx,client/**/*.ts,client/**/*.scss
description: React frontend development standards and SCSS styling guidelines
---

# Frontend Development - React + TypeScript + SCSS

## React Component Standards

### Component Structure
```typescript
// Always use functional components with TypeScript
interface ComponentProps {
  // Define all props with explicit types
  posts: Post[];
  onPostSubmit: (data: PostFormData) => Promise<void>;
  onPostEdit: (id: string, editId: string, updates: Partial<Post>) => Promise<void>;
}

const ComponentName: React.FC<ComponentProps> = ({ posts, onPostSubmit, onPostEdit }) => {
  // Component logic here
  return (
    <div className="component-name">
      {/* JSX content */}
    </div>
  );
};

export default ComponentName;
```

### State Management
```typescript
// Use useState for local state
const [posts, setPosts] = useState<Post[]>([]);
const [isLoading, setIsLoading] = useState<boolean>(false);
const [error, setError] = useState<string | null>(null);

// Use useCallback for event handlers
const handlePostSubmit = useCallback(async (data: PostFormData) => {
  try {
    setIsLoading(true);
    await onPostSubmit(data);
    setError(null);
  } catch (err) {
    setError(err instanceof Error ? err.message : 'An error occurred');
  } finally {
    setIsLoading(false);
  }
}, [onPostSubmit]);

// Use useEffect for side effects
useEffect(() => {
  const fetchPosts = async () => {
    try {
      const response = await fetch('/api/posts');
      const data = await response.json();
      setPosts(data);
    } catch (err) {
      setError('Failed to fetch posts');
    }
  };
  
  fetchPosts();
}, []);
```

### Custom Hooks
```typescript
// Create custom hooks for reusable logic
export const usePosts = () => {
  const [posts, setPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const fetchPosts = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/posts');
      const data = await response.json();
      setPosts(data);
      setError(null);
    } catch (err) {
      setError('Failed to fetch posts');
    } finally {
      setIsLoading(false);
    }
  }, []);

  return { posts, isLoading, error, fetchPosts };
};

export const useLocalStorage = <T>(key: string, initialValue: T) => {
  const [storedValue, setStoredValue] = useState<T>(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      return initialValue;
    }
  });

  const setValue = useCallback((value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {
      console.error('Error saving to localStorage:', error);
    }
  }, [key, storedValue]);

  return [storedValue, setValue] as const;
};
```

## SCSS Styling Standards

### File Organization
```
client/src/styles/
├── _variables.scss      # SCSS variables
├── _mixins.scss         # Reusable mixins
├── _base.scss          # Base styles and resets
├── _components.scss    # Component-specific styles
├── _layout.scss        # Layout and grid styles
└── main.scss          # Main stylesheet imports
```

### SCSS Variables
```scss
// _variables.scss
// Color palette
$primary-color: #2563eb;
$secondary-color: #64748b;
$success-color: #10b981;
$error-color: #ef4444;
$warning-color: #f59e0b;

// Typography
$font-family-base: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
$font-size-base: 16px;
$font-size-sm: 14px;
$font-size-lg: 18px;
$font-weight-normal: 400;
$font-weight-medium: 500;
$font-weight-semibold: 600;

// Spacing
$spacing-xs: 4px;
$spacing-sm: 8px;
$spacing-md: 16px;
$spacing-lg: 24px;
$spacing-xl: 32px;

// Border radius
$border-radius-sm: 4px;
$border-radius-md: 8px;
$border-radius-lg: 12px;

// Shadows
$shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
$shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
$shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
```

### Component Styling
```scss
// _components.scss
.post-wall {
  max-width: 800px;
  margin: 0 auto;
  padding: $spacing-lg;

  &__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: $spacing-lg;
  }

  &__title {
    font-size: $font-size-lg;
    font-weight: $font-weight-semibold;
    color: $primary-color;
  }
}

.post-card {
  background: white;
  border-radius: $border-radius-md;
  padding: $spacing-md;
  margin-bottom: $spacing-md;
  box-shadow: $shadow-sm;
  border: 1px solid #e2e8f0;

  &__header {
    display: flex;
    align-items: center;
    margin-bottom: $spacing-sm;
  }

  &__avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: $spacing-sm;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
    background: #f1f5f9;
  }

  &__alias {
    font-weight: $font-weight-medium;
    color: $primary-color;
  }

  &__timestamp {
    font-size: $font-size-sm;
    color: $secondary-color;
    margin-left: auto;
  }

  &__content {
    margin-bottom: $spacing-sm;
    line-height: 1.5;
  }

  &__actions {
    display: flex;
    gap: $spacing-sm;
  }
}

.post-form {
  background: white;
  border-radius: $border-radius-md;
  padding: $spacing-lg;
  margin-bottom: $spacing-lg;
  box-shadow: $shadow-md;

  &__title {
    font-size: $font-size-lg;
    font-weight: $font-weight-semibold;
    margin-bottom: $spacing-md;
  }

  &__field {
    margin-bottom: $spacing-md;

    label {
      display: block;
      font-weight: $font-weight-medium;
      margin-bottom: $spacing-xs;
      color: #374151;
    }

    input, textarea, select {
      width: 100%;
      padding: $spacing-sm $spacing-md;
      border: 1px solid #d1d5db;
      border-radius: $border-radius-sm;
      font-size: $font-size-base;
      transition: border-color 0.2s;

      &:focus {
        outline: none;
        border-color: $primary-color;
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
      }

      &.error {
        border-color: $error-color;
      }
    }

    textarea {
      resize: vertical;
      min-height: 100px;
    }

    .error-message {
      color: $error-color;
      font-size: $font-size-sm;
      margin-top: $spacing-xs;
    }
  }

  &__actions {
    display: flex;
    gap: $spacing-sm;
    justify-content: flex-end;
  }
}

.btn {
  padding: $spacing-sm $spacing-md;
  border: none;
  border-radius: $border-radius-sm;
  font-size: $font-size-base;
  font-weight: $font-weight-medium;
  cursor: pointer;
  transition: all 0.2s;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: $spacing-xs;

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  &--primary {
    background: $primary-color;
    color: white;

    &:hover:not(:disabled) {
      background: darken($primary-color, 10%);
    }
  }

  &--secondary {
    background: $secondary-color;
    color: white;

    &:hover:not(:disabled) {
      background: darken($secondary-color, 10%);
    }
  }

  &--danger {
    background: $error-color;
    color: white;

    &:hover:not(:disabled) {
      background: darken($error-color, 10%);
    }
  }

  &--small {
    padding: $spacing-xs $spacing-sm;
    font-size: $font-size-sm;
  }
}

.modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;

  &__content {
    background: white;
    border-radius: $border-radius-md;
    padding: $spacing-lg;
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
  }

  &__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: $spacing-md;
  }

  &__title {
    font-size: $font-size-lg;
    font-weight: $font-weight-semibold;
  }

  &__close {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: $secondary-color;

    &:hover {
      color: $primary-color;
    }
  }
}
```

### Responsive Design
```scss
// Use mobile-first approach
.post-wall {
  padding: $spacing-md;

  @media (min-width: 768px) {
    padding: $spacing-lg;
  }

  @media (min-width: 1024px) {
    padding: $spacing-xl;
  }
}

.post-form {
  @media (min-width: 768px) {
    .form-row {
      display: flex;
      gap: $spacing-md;

      .form-field {
        flex: 1;
      }
    }
  }
}
```

## Component Architecture

### Main Components
1. **PostWall** - Main container component
2. **PostList** - Displays list of posts
3. **PostCard** - Individual post display
4. **PostForm** - Create/edit post form
5. **EditModal** - Modal for editing posts
6. **AvatarSelector** - Avatar selection component

### Component Props Patterns
```typescript
// Always define explicit prop interfaces
interface PostCardProps {
  post: Post;
  canEdit: boolean;
  onEdit: (post: Post) => void;
  onDelete: (id: string, editId: string) => void;
}

interface PostFormProps {
  initialData?: Partial<PostFormData>;
  onSubmit: (data: PostFormData) => Promise<void>;
  onCancel?: () => void;
  isSubmitting: boolean;
}
```

## Accessibility Standards
- Use semantic HTML elements
- Provide proper ARIA labels
- Ensure keyboard navigation
- Maintain color contrast ratios
- Use focus indicators
- Provide loading states and error messages

## Performance Considerations
- Use React.memo for expensive components
- Implement proper key props for lists
- Use useCallback and useMemo appropriately
- Lazy load components when needed
- Optimize images and assets